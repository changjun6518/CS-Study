커널
💡 Kernel(커널)이란?

운영체제는 소프트웨어로써 부팅되며 메인메모리에 적재되는데, 규모가 크므로 필요한 부분만 메모리에 적재하게된다.
이 때 메모리에 상주하는 운영체제의 부분을 커널이라고 함. (메모리,프로세스, 파일시스템, IO, 인터럽트 관리)



💡 인터럽트가 필요한 이유 및 언제 발생되는지 말해주세요.

인터럽트는 I/O 장치나 주변장치의 이슈나 예외상황을 CPU에 알려 처리하는 기술이다.

입출력 속도가 CPU에 비해 느리므로 CPU가 입출력 연산을 기다리는게 아닌 그동안 다른 연산을 수행하다
인터럽트를 요청받으면 되므로, CPU의 효율이 높아진다.


선점형 스케쥴링
실행중인 프로세스를 종료하려면 인터럽트가 필요.


I/O 장치 핸들링
저장매체에서 데이터 처리 완료시, block상태이던 프로세스를 ready로 바꿔줌


예외상황 핸들링




💡 인터럽트 종류는 무엇이 있으며 우선순위를 말해주세요.

소프트웨어 인터럽트
프로그램 내부에서 잘못되었을 경우 (system call, exception)

1. Devide by zero
2. overflow/underflow
3. 사용자모드에서 권한이 필요한 공간 접근시



하드웨어 인터럽트
하드웨어에서 발생하는 이벤트

1. 전원이상
2. 기계고장
3. IO 이벤트
4. Timer 이벤트




💡 인터럽트 동작 과정을 말해주세요.(컨텍스트 스위칭)

1. Process가 system call을 통해 인터럽트 요청
2. 현재 프로세스 중단
3. 현재 프로세스 상태 PCB에 저장 (메모리주소, 레지스터값...)
4. Program counter에 다음에 실행할 명령어 주소 저장
5. 인터럽트 벡터 읽고 ISR의 주소값을 얻어 ISR로 이동
6. 루틴 실행 후 ISR끝의 IRET명령어를 통해 인터럽트 해제
7. PC값 복원하여 수행중이던 프로그램 재개




💡 시스템콜이란 무엇이며 시스템 콜을 사용하는 예시를 말해주세요.

System call : OS의 특정기능을 쓸 수 있게 하는 인터페이스

1. 사용자모드에서 malloc으로 메모리할당 요청
2. 커널모드로 전환 후 사용자에게 메모리값 전달
3. 사용자모드로 전환



💡 커널 모드와 유저 모드를 구분해 놓은 이유

하드웨어의 보안을 유지하기 위해




💡 커널 수준 스레드와 사용자 수준 스레드의 각각 장단점?

사용자 수준 스레드

스레드가 사용자 영역에서 생성 및 관리 하여 커널은 스레드의 존재를 인식하지 못함

장점 : 스레드를 지원하지 않는 OS에서도 실행가능
      스레드 스위칭이 빠름 (커널에 들어갈 필요 없음)
      
단점 : 하나의 스레드가 블록되면(ex)IO요청) 전체 프로세스가 블록됨
      blocking system call을 막기위해 nonblocking system call을 만들어야함


  
커널 수준 스레드

장점 : 새로운 nonblocking system call이 필요하지 않음
      커널이 스레드를 개별적으로 관리, 안전성, 다양한 기능 제공
      
단점 : 스레드 스위칭이 느림








💡페이지 테이블(변형)

원래의 페이지 테이블 문제

TLB를 사용할때, Context switch가 일어날 경우 기존의 TLB를 다 비우고 새로 저장해야하는데 이때 성능저하가 일어난다.

페이지테이블의 크기가 커질수록 메모리를 많이 차지하는데, 페이지의 크기를 크게하여도 내부 단편화의 문제가 있다.


ex) 32bit 주소체계, page entry 크기 : 4B, 페이지 크기 : 4KB, 프로세스 개수 : 10

2^(32-12)*4*10 = 40MB 크기의 메모리 공간이 페이지테이블에 필요




1. 역페이지 테이블 

frame당 1개의 page entry를 가짐
virtual address와 동일한 값을 가진 entry를 찾음 -> page의 위치가 곧 frame의 물리주소


장점
테이블 크기 = 피지컬 메모리 크기. 메모리를 적게 사용.

단점
최악의 경우 페이지 테이블 전체 탐색이 필요하므로 성능 저하 발생 가능




2. 멀티레벨 페이지 테이블

선형 페이지 테이블을 트리 구조로 표현

장점 
사용된 주소 공간의 크기의 비례하여 페이지 테이블 공간이 할당되어 작은 크기의 페이지 테이블을 사용가능.
페이지 테이블을 페이지 크기로 분할함으로써 메모리 관리가 용이


단점
TLB miss일 때, 주소 변환을 위해 두 번의 메모리 로드가 발생 (페이지 디렉토리, PTE 접근)






💡파일시스템

운영체제의 서브 시스템
응용 프로그램을 실행함으로써 생성하는 정보를 파일 단위로 저장, 관리

파일 시스템 기능
1. 파일을 create, delete, modify
2. 파일 백업, 복구
3. 주기억장치, 보조기억장치 간의 파일 전송



디렉토리

1단계 디렉토리 : 모든 파일이 같은 디렉토리에서 관리
파일이 유일한 이름을 가져야함

2단계 디렉토리 : 마스터 파일 디렉토리와 그 밑에 사용자 파일 디렉토리 구조
사용자명 디렉토리가 독립적이라 파일 공유 불가
Namespace로 사용자마다 디렉토리 소유.

트리구조 디렉토리 : 루트 디렉토리와 서브 디렉토리. 
절대 경로, 상대 경로로 탐색
생성, 삭제 용이



파일 할당 방식
하나의 디스크에 여러파일이 저장되는데, 배치하는 방식

1. Contiguous Allocation
ex)CD-Rom
각 파일에 disk block 할당

장점 : 단순하고 구현쉬움, 엑세스 시간 빠름
단점 : 외부단편화가 발생



2. Linked List Allocation
Pointer와 File block으로 이루어짐

장점 : 외부 단편화 없음
단점 :Data의 크기가 2의 승으로 표현이 안됨. 랜덤 접근은 느리다.



3. FAT (파일 할당 테이블)
파일, 디렉토리 위치 정보(포인터)를 저장하는 테이블

장점 : random access 쉬움
단점 : table 크기가 disk와 비례하여 메모리 사용 큼



💡IO

